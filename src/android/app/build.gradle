apply plugin: 'com.android.application'

android {
    signingConfigs {
        debug {
            storeFile file('android.keystore')
            storePassword 'hyf123456'
            keyAlias 'android.keystore'
            keyPassword 'hyf123456'
        }
    }
    compileSdkVersion 30

    defaultConfig {
        applicationId = 'com.example.gfx_tests'
        minSdkVersion 21
        targetSdkVersion 26
        externalNativeBuild {
            cmake {
                targets "gfx_tests"
                arguments '-DANDROID_STL=c++_static'
                arguments '-DANDROID_ARM_NEON=ON'
            }
        }

        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a'
        }
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }

        debug {
            debuggable true
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            version '3.10.2'
            path "../../../CMakeLists.txt"
        }
    }
    sourceSets.main {
        java.srcDir "src/main/cpp"
        res.srcDir "src/main/res"
        manifest.srcFile "src/main/AndroidManifest.xml"
        assets.srcDir "../../Resources"

        jniLibs {
            // Vulkan validation layer
            srcDir "${android.ndkDirectory}/sources/third_party/vulkan/src/build-android/jniLibs"
        }
    }
}

android.applicationVariants.all { variant ->
    def project_root_folder = "${projectDir}/../.."
    def dest_assets_folder = "${projectDir}/assets"

    // delete previous files first
    delete dest_assets_folder
    def targetName = variant.name.capitalize()
    def copyTaskName = "copy${targetName}ResourcesToAssets"

    tasks.register(copyTaskName) {
        copy {
            from "${buildDir}/../../../Resources"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
            exclude "**/*.gz"
        }
    }
    tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}
